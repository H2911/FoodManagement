package FontSide;

import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Imperfecton
 */
public class CartPage extends javax.swing.JFrame {

    /**
     * Creates new form CartPage
     */
    public CartPage() {
        initComponents();
        String[] row;
        String productName;
        String quantity;
        String typeOfProduct;
        String price;
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        for(int i = 0;i < Cart.ListOfProduct.size(); i++){
            typeOfProduct = Cart.ListOfProduct.get(i).split(",")[0];
            System.out.println(typeOfProduct);
            switch (typeOfProduct) {
                case "Pizza":
                    productName = Cart.ListOfProduct.get(i).split(",")[1];
                    price = Cart.ListOfProduct.get(i).split(",")[7];
                    row = new String[]{productName, "1", price};
                    model.addRow(row);
                    break;
                case "Pasta":
                    productName = Cart.ListOfProduct.get(i).split(",")[1];
                    quantity = Cart.ListOfProduct.get(i).split(",")[2];
                    price = Cart.ListOfProduct.get(i).split(",")[3];
                    row = new String[]{productName, quantity, price};
                    model.addRow(row);
                    break;
                case "Drink" :
                    productName = Cart.ListOfProduct.get(i).split(",")[1];
                    quantity = Cart.ListOfProduct.get(i).split(",")[2];
                    price  = Cart.ListOfProduct.get(i).split(",")[3];
                    //row Drink
                    row = new String[]{productName, quantity, price};
                    model.addRow(row);
                    break;
                    
                default:
                    String cups = Cart.ListOfProduct.get(i).split(",")[1];
                    row = new String[]{"Cups", cups, "0"};
                    model.addRow(row);
                    break;
            }
        }
        
        labelTotal.setText(Cart.getTotal().toString() + " $");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        bntPay = new javax.swing.JButton();
        bntBackMenu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setText("Cart");

        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Quantity", "Price", "Details", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCart.getColumn("Action").setCellRenderer(new ButtonRendererRemove());
        tableCart.getColumn("Action").setCellEditor(new ButtonEditorRemove(new JCheckBox()));
        tableCart.setColumnSelectionAllowed(true);
        tableCart.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableCart);
        tableCart.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableCart.getColumnModel().getColumnCount() > 0) {
            tableCart.getColumnModel().getColumn(0).setResizable(false);
            tableCart.getColumnModel().getColumn(1).setResizable(false);
            tableCart.getColumnModel().getColumn(2).setResizable(false);
            tableCart.getColumnModel().getColumn(3).setResizable(false);
            tableCart.getColumnModel().getColumn(4).setResizable(false);
        }
        tableCart.getColumn("Details").setCellRenderer(new ButtonRendererView());
        tableCart.getColumn("Details").setCellEditor(new ButtonEditorView(new JCheckBox()));

        bntPay.setText("Pay");
        bntPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPayActionPerformed(evt);
            }
        });

        bntBackMenu.setText("Back");
        bntBackMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntBackMenuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Total");

        labelTotal.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        labelTotal.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(369, 369, 369)
                .addComponent(jLabel1)
                .addGap(196, 196, 196)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(labelTotal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bntBackMenu)
                        .addGap(31, 31, 31)
                        .addComponent(bntPay)
                        .addGap(58, 58, 58))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(labelTotal))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntPay)
                    .addComponent(bntBackMenu))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


class ButtonRendererView extends JButton implements TableCellRenderer {

  public ButtonRendererView() {
    setOpaque(true);
  }

  @Override
  public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(UIManager.getColor("Button.background"));
    }
    setText((value == null) ? "View" : value.toString());
    return this;
  }
}

class ButtonEditorView extends DefaultCellEditor 
  {
    private JButton button;
    private String label;
    
    public ButtonEditorView(JCheckBox checkBox) {
    super(checkBox);
    button = new JButton();
    button.setOpaque(true);
    button.addActionListener((ActionEvent e) -> {
        int row = tableCart.getSelectedRow();
        String product = Cart.ListOfProduct.get(row);       
        String typeOfProduct = product.split(",")[0];        
        if (typeOfProduct.equals("Pizza")){
            String pizzaName = product.split(",")[1];
            String size = product.split(",")[2];
            String base = product.split(",")[3];
            String sauce = product.split(",")[5];
            String note = product.split(",")[6];
            JOptionPane.showMessageDialog(null, String.format(
                    "Details: \n"+
                    "Pizza: %s\n"+
                    "Size: %s\n"+
                    "Base: %s\n"+
                    "Sauce: %s\n"+        
                    "Note: %s\n",pizzaName, size, base, sauce, note));
        }
    });
    }
    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
    boolean isSelected, int row, int column) 
    {
      label = (value == null) ? "View" : value.toString();
      button.setText(label);
      return button;
    }
    @Override
    public Object getCellEditorValue() 
    {
      return new String(label);
    }
  }

class ButtonRendererRemove extends JButton implements TableCellRenderer {

  public ButtonRendererRemove() {
    setOpaque(true);
  }

  @Override
  public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(UIManager.getColor("Button.background"));
    }
    setText((value == null) ? "Remove" : value.toString());
    return this;
  }
}

class ButtonEditorRemove extends DefaultCellEditor 
  {
    private JButton button;
    private String label;
    
    public ButtonEditorRemove(JCheckBox checkBox) {
    super(checkBox);
    button = new JButton();
    button.setOpaque(true);
    button.addActionListener((ActionEvent e) -> {
        int respond = JOptionPane.showConfirmDialog(null,"Do you want to remove this item?", "Remove Item", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(respond == JOptionPane.YES_OPTION){
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
            int row = tableCart.getSelectedRow();
            Cart.ListOfProduct.remove(row);
            System.out.println(row);
            model.removeRow(row);
            refresh();
        }
    });
    }
    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
    boolean isSelected, int row, int column) 
    {
      label = (value == null) ? "Remove" : value.toString();
      button.setText(label);
      return button;
    }
    @Override
    public Object getCellEditorValue() 
    {
      return new String(label);
    }
  }

    private void refresh(){
        CartPage cartPage = new CartPage();
        dispose();
        cartPage.setVisible(true);
    }

    private void bntBackMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntBackMenuActionPerformed
        dispose();
        OrderMealPage orderMealPage = new OrderMealPage();
        orderMealPage.setVisible(true);
    }//GEN-LAST:event_bntBackMenuActionPerformed

    private void bntPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPayActionPerformed
        PaymentMethod payment = new PaymentMethod();
        payment.setVisible(true);
        hide();
    }//GEN-LAST:event_bntPayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CartPage().setVisible(true);
            }
        });
    }
    
  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntBackMenu;
    private javax.swing.JButton bntPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel labelTotal;
    private static javax.swing.JTable tableCart;
    // End of variables declaration//GEN-END:variables
}
